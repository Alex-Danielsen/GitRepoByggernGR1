
ByggernGR1_Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00000cca  00000d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080023a  0080023a  00000d98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d31  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000713  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000817  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00002b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f1  00000000  00000000  000030cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000035bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ec       	ldi	r30, 0xCA	; 202
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 34       	cpi	r26, 0x44	; 68
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b3 d0       	rcall	.+358    	; 0x286 <main>
 120:	d2 c5       	rjmp	.+2980   	; 0xcc6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_init>:
#include "mcp.h"
#include "MCP2515_macros.h"
#include <stdio.h>
#include <avr/delay.h>

void can_init(){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	 mcp_init();
 12e:	25 d1       	rcall	.+586    	; 0x37a <mcp_init>
	 volatile uint8_t canStat = mcp_read(MCP_CANSTAT);	 
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	e3 d0       	rcall	.+454    	; 0x2fa <mcp_read>
 134:	89 83       	std	Y+1, r24	; 0x01
	 
	 //turn off rollover mode
	 mcp_bitModify(MCP_RXB0CTRL, MCP_ROLLOVER_OFF,0x04);
 136:	44 e0       	ldi	r20, 0x04	; 4
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	80 e6       	ldi	r24, 0x60	; 96
 13c:	ff d0       	rcall	.+510    	; 0x33c <mcp_bitModify>
	 //set interrupts to fire
	 mcp_bitModify(MCP_CANINTE,0x01,0xFF );
 13e:	4f ef       	ldi	r20, 0xFF	; 255
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	8b e2       	ldi	r24, 0x2B	; 43
 144:	fb d0       	rcall	.+502    	; 0x33c <mcp_bitModify>
	 
	//Set to loopback mode - should be done in CAN driver
	//Input descriptions: ADress of register, mask (first 3 bits), mode
	mcp_bitModify(MCP_CANCTRL, MODE_MASK ,MODE_NORMAL);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	60 ee       	ldi	r22, 0xE0	; 224
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	f7 d0       	rcall	.+494    	; 0x33c <mcp_bitModify>
	
	canStat = mcp_read(MCP_CANSTAT);
 14e:	8e e0       	ldi	r24, 0x0E	; 14
 150:	d4 d0       	rcall	.+424    	; 0x2fa <mcp_read>
 152:	89 83       	std	Y+1, r24	; 0x01
	if((canStat &MODE_MASK) == MODE_NORMAL){
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	80 7e       	andi	r24, 0xE0	; 224
 158:	61 f4       	brne	.+24     	; 0x172 <can_init+0x4e>
		printf("Is in loopback mode - %i\n",canStat);
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	1f 92       	push	r1
 15e:	8f 93       	push	r24
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	9f 93       	push	r25
 166:	8f 93       	push	r24
 168:	94 d1       	rcall	.+808    	; 0x492 <printf>
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
	}
	
}
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <can_send>:



void can_send(can_message *message){
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
	uint8_t len = message->length & 0x0F;
 184:	0a 81       	ldd	r16, Y+2	; 0x02
 186:	0f 70       	andi	r16, 0x0F	; 15
	
	mcp_write(MCP_TXB0SIDL, 0x00);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	82 e3       	ldi	r24, 0x32	; 50
 18c:	c3 d0       	rcall	.+390    	; 0x314 <mcp_write>
	mcp_write(MCP_TXB0SIDH, 0x01);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	81 e3       	ldi	r24, 0x31	; 49
 192:	c0 d0       	rcall	.+384    	; 0x314 <mcp_write>
	mcp_write(MCP_TXB0DLC, len);
 194:	60 2f       	mov	r22, r16
 196:	85 e3       	ldi	r24, 0x35	; 53
 198:	bd d0       	rcall	.+378    	; 0x314 <mcp_write>
	
	for(uint8_t i = 0; i < len; i++){
 19a:	00 23       	and	r16, r16
 19c:	49 f0       	breq	.+18     	; 0x1b0 <can_send+0x36>
 19e:	23 96       	adiw	r28, 0x03	; 3
 1a0:	0a 5c       	subi	r16, 0xCA	; 202
 1a2:	16 e3       	ldi	r17, 0x36	; 54
		mcp_write(MCP_TXB0D0+i, message->data[i]);
 1a4:	69 91       	ld	r22, Y+
 1a6:	81 2f       	mov	r24, r17
 1a8:	b5 d0       	rcall	.+362    	; 0x314 <mcp_write>
 1aa:	1f 5f       	subi	r17, 0xFF	; 255
	
	mcp_write(MCP_TXB0SIDL, 0x00);
	mcp_write(MCP_TXB0SIDH, 0x01);
	mcp_write(MCP_TXB0DLC, len);
	
	for(uint8_t i = 0; i < len; i++){
 1ac:	10 13       	cpse	r17, r16
 1ae:	fa cf       	rjmp	.-12     	; 0x1a4 <can_send+0x2a>
		mcp_write(MCP_TXB0D0+i, message->data[i]);
	}
	
	
	mcp_requestSend(1);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	be d0       	rcall	.+380    	; 0x332 <mcp_requestSend>
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <can_recieve>:

can_message can_recieve(){
 1c0:	9f 92       	push	r9
 1c2:	af 92       	push	r10
 1c4:	bf 92       	push	r11
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	2c 97       	sbiw	r28, 0x0c	; 12
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	7c 01       	movw	r14, r24
	can_message message;
	
	volatile uint8_t canIntf = mcp_read(MCP_CANINTF);	 
 1e8:	8c e2       	ldi	r24, 0x2C	; 44
 1ea:	87 d0       	rcall	.+270    	; 0x2fa <mcp_read>
 1ec:	8c 87       	std	Y+12, r24	; 0x0c
	
	if(mcp_read(MCP_CANSTAT) & 0x0C){
 1ee:	8e e0       	ldi	r24, 0x0E	; 14
 1f0:	84 d0       	rcall	.+264    	; 0x2fa <mcp_read>
 1f2:	8c 70       	andi	r24, 0x0C	; 12
 1f4:	19 f1       	breq	.+70     	; 0x23c <can_recieve+0x7c>
		message.id = mcp_read(MCP_RXB0SIDH)<<8 | mcp_read(MCP_RXB0SIDL);
 1f6:	81 e6       	ldi	r24, 0x61	; 97
 1f8:	80 d0       	rcall	.+256    	; 0x2fa <mcp_read>
 1fa:	c8 2e       	mov	r12, r24
 1fc:	82 e6       	ldi	r24, 0x62	; 98
 1fe:	7d d0       	rcall	.+250    	; 0x2fa <mcp_read>
 200:	d1 2c       	mov	r13, r1
 202:	dc 2c       	mov	r13, r12
 204:	cc 24       	eor	r12, r12
 206:	c8 2a       	or	r12, r24
		message.length = mcp_read(MCP_RXB0DLC) & 0x0F;
 208:	85 e6       	ldi	r24, 0x65	; 101
 20a:	77 d0       	rcall	.+238    	; 0x2fa <mcp_read>
 20c:	8f 70       	andi	r24, 0x0F	; 15
 20e:	98 2e       	mov	r9, r24
		for(uint8_t i = 0; i < message.length; i++){
 210:	c1 f0       	breq	.+48     	; 0x242 <can_recieve+0x82>
 212:	8e 01       	movw	r16, r28
 214:	0c 5f       	subi	r16, 0xFC	; 252
 216:	1f 4f       	sbci	r17, 0xFF	; 255
 218:	0f 2e       	mov	r0, r31
 21a:	f6 e6       	ldi	r31, 0x66	; 102
 21c:	af 2e       	mov	r10, r31
 21e:	f0 2d       	mov	r31, r0
 220:	a8 0e       	add	r10, r24
 222:	0f 2e       	mov	r0, r31
 224:	f6 e6       	ldi	r31, 0x66	; 102
 226:	bf 2e       	mov	r11, r31
 228:	f0 2d       	mov	r31, r0
			message.data[i] = mcp_read(MCP_RXB0D0 + i);
 22a:	8b 2d       	mov	r24, r11
 22c:	66 d0       	rcall	.+204    	; 0x2fa <mcp_read>
 22e:	f8 01       	movw	r30, r16
 230:	81 93       	st	Z+, r24
 232:	8f 01       	movw	r16, r30
 234:	b3 94       	inc	r11
	volatile uint8_t canIntf = mcp_read(MCP_CANINTF);	 
	
	if(mcp_read(MCP_CANSTAT) & 0x0C){
		message.id = mcp_read(MCP_RXB0SIDH)<<8 | mcp_read(MCP_RXB0SIDL);
		message.length = mcp_read(MCP_RXB0DLC) & 0x0F;
		for(uint8_t i = 0; i < message.length; i++){
 236:	ba 10       	cpse	r11, r10
 238:	f8 cf       	rjmp	.-16     	; 0x22a <can_recieve+0x6a>
 23a:	03 c0       	rjmp	.+6      	; 0x242 <can_recieve+0x82>
			message.data[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}else{
		printf("No new message\n");
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	39 d1       	rcall	.+626    	; 0x4b4 <puts>
	}
	
	//on the MCP_CANINTF register, set bit 0 to value 0. E.g. mask 0B00000001, value 0
	mcp_bitModify(MCP_CANINTF, 1, 0);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	8c e2       	ldi	r24, 0x2C	; 44
 248:	79 d0       	rcall	.+242    	; 0x33c <mcp_bitModify>
	
	return message;
 24a:	da 82       	std	Y+2, r13	; 0x02
 24c:	c9 82       	std	Y+1, r12	; 0x01
 24e:	9b 82       	std	Y+3, r9	; 0x03
 250:	8b e0       	ldi	r24, 0x0B	; 11
 252:	fe 01       	movw	r30, r28
 254:	31 96       	adiw	r30, 0x01	; 1
 256:	d7 01       	movw	r26, r14
 258:	01 90       	ld	r0, Z+
 25a:	0d 92       	st	X+, r0
 25c:	8a 95       	dec	r24
 25e:	e1 f7       	brne	.-8      	; 0x258 <can_recieve+0x98>
}
 260:	c7 01       	movw	r24, r14
 262:	2c 96       	adiw	r28, 0x0c	; 12
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	bf 90       	pop	r11
 280:	af 90       	pop	r10
 282:	9f 90       	pop	r9
 284:	08 95       	ret

00000286 <main>:

#define F_CPU 16000000
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1

int main(void){	
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	a1 97       	sbiw	r28, 0x21	; 33
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
 29a:	87 e6       	ldi	r24, 0x67	; 103
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	9a d0       	rcall	.+308    	; 0x3d4 <UART_init>
	UART_parsePrint();
 2a0:	a8 d0       	rcall	.+336    	; 0x3f2 <UART_parsePrint>
	can_init();
 2a2:	40 df       	rcall	.-384    	; 0x124 <can_init>
	
	//BEGIN CAN TEST:
	volatile can_message newMessage = {
 2a4:	fe 01       	movw	r30, r28
 2a6:	31 96       	adiw	r30, 0x01	; 1
 2a8:	8b e0       	ldi	r24, 0x0B	; 11
 2aa:	df 01       	movw	r26, r30
 2ac:	1d 92       	st	X+, r1
 2ae:	8a 95       	dec	r24
 2b0:	e9 f7       	brne	.-6      	; 0x2ac <main+0x26>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	8b 83       	std	Y+3, r24	; 0x03
 2b6:	87 e1       	ldi	r24, 0x17	; 23
 2b8:	8c 83       	std	Y+4, r24	; 0x04
 2ba:	8b e0       	ldi	r24, 0x0B	; 11
 2bc:	de 01       	movw	r26, r28
 2be:	1c 96       	adiw	r26, 0x0c	; 12
 2c0:	01 90       	ld	r0, Z+
 2c2:	0d 92       	st	X+, r0
 2c4:	8a 95       	dec	r24
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x3a>
		.id = 0x00,
		.length = 1,
		.data[0] = 23,
	};
	
	can_send(&newMessage);
 2c8:	ce 01       	movw	r24, r28
 2ca:	0c 96       	adiw	r24, 0x0c	; 12
 2cc:	56 df       	rcall	.-340    	; 0x17a <can_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	87 ea       	ldi	r24, 0xA7	; 167
 2d0:	91 e6       	ldi	r25, 0x61	; 97
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x4c>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x52>
 2d8:	00 00       	nop
	_delay_ms(100);
	volatile can_message recMessage = can_recieve();
 2da:	ce 01       	movw	r24, r28
 2dc:	47 96       	adiw	r24, 0x17	; 23
 2de:	70 df       	rcall	.-288    	; 0x1c0 <can_recieve>
	printf("DATA: %d\n",(recMessage.data[0]));
 2e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
 2e2:	1f 92       	push	r1
 2e4:	8f 93       	push	r24
 2e6:	8f e2       	ldi	r24, 0x2F	; 47
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	9f 93       	push	r25
 2ec:	8f 93       	push	r24
 2ee:	d1 d0       	rcall	.+418    	; 0x492 <printf>
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <main+0x72>

000002fa <mcp_read>:
	PORTB &= ~(1 << PB7);
	spi_transmit(MCP_READ_STATUS); //command to read status
	spi_transmit(0x00); //anything - just send something to get info back on the bus
	PORTB |= (1 << PB7);
	return spi_read();
}
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24
 2fe:	2f 98       	cbi	0x05, 7	; 5
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	51 d0       	rcall	.+162    	; 0x3a6 <spi_transmit>
 304:	8c 2f       	mov	r24, r28
 306:	4f d0       	rcall	.+158    	; 0x3a6 <spi_transmit>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	4d d0       	rcall	.+154    	; 0x3a6 <spi_transmit>
 30c:	2f 9a       	sbi	0x05, 7	; 5
 30e:	50 d0       	rcall	.+160    	; 0x3b0 <spi_read>
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <mcp_write>:
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	d8 2f       	mov	r29, r24
 31a:	c6 2f       	mov	r28, r22
 31c:	2f 98       	cbi	0x05, 7	; 5
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	42 d0       	rcall	.+132    	; 0x3a6 <spi_transmit>
 322:	8d 2f       	mov	r24, r29
 324:	40 d0       	rcall	.+128    	; 0x3a6 <spi_transmit>
 326:	8c 2f       	mov	r24, r28
 328:	3e d0       	rcall	.+124    	; 0x3a6 <spi_transmit>
 32a:	2f 9a       	sbi	0x05, 7	; 5
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <mcp_requestSend>:
 332:	2f 98       	cbi	0x05, 7	; 5
 334:	81 e8       	ldi	r24, 0x81	; 129
 336:	37 d0       	rcall	.+110    	; 0x3a6 <spi_transmit>
 338:	2f 9a       	sbi	0x05, 7	; 5
 33a:	08 95       	ret

0000033c <mcp_bitModify>:

void mcp_bitModify(uint8_t address, uint8_t mask, char data){
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	18 2f       	mov	r17, r24
 344:	d6 2f       	mov	r29, r22
 346:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB7);
 348:	2f 98       	cbi	0x05, 7	; 5
	spi_transmit(MCP_BITMOD);
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	2c d0       	rcall	.+88     	; 0x3a6 <spi_transmit>
	spi_transmit(address);
 34e:	81 2f       	mov	r24, r17
 350:	2a d0       	rcall	.+84     	; 0x3a6 <spi_transmit>
	spi_transmit(mask);
 352:	8d 2f       	mov	r24, r29
 354:	28 d0       	rcall	.+80     	; 0x3a6 <spi_transmit>
	spi_transmit(data);
 356:	8c 2f       	mov	r24, r28
 358:	26 d0       	rcall	.+76     	; 0x3a6 <spi_transmit>
	PORTB |= (1 << PB7); 
 35a:	2f 9a       	sbi	0x05, 7	; 5
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	08 95       	ret

00000364 <mcp_reset>:

void mcp_reset(){
	PORTB &= ~(1 << PB7);
 364:	2f 98       	cbi	0x05, 7	; 5
	spi_transmit(MCP_RESET);
 366:	80 ec       	ldi	r24, 0xC0	; 192
 368:	1e d0       	rcall	.+60     	; 0x3a6 <spi_transmit>
 36a:	83 ec       	ldi	r24, 0xC3	; 195
 36c:	99 e0       	ldi	r25, 0x09	; 9
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <mcp_reset+0xa>
 372:	00 c0       	rjmp	.+0      	; 0x374 <mcp_reset+0x10>
 374:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1 << PB7);
 376:	2f 9a       	sbi	0x05, 7	; 5
 378:	08 95       	ret

0000037a <mcp_init>:
void mcp_init(){
	
	
	
	// Data direction of Chip Select pin
	DDRB |= (1 << PB7);
 37a:	27 9a       	sbi	0x04, 7	; 4
	// Set CS high
	PORTB |= (1 << PB7);
 37c:	2f 9a       	sbi	0x05, 7	; 5
	
	// Initialize SPI
	spi_init();	
 37e:	02 d0       	rcall	.+4      	; 0x384 <spi_init>
	
	//Highly recommended to reset after power on
	mcp_reset();
 380:	f1 cf       	rjmp	.-30     	; 0x364 <mcp_reset>
 382:	08 95       	ret

00000384 <spi_init>:
#include <avr/io.h>


void spi_init(){
	// set data direction on SPI pins
	DDRB |= (1 << DDB1)|(1 << DDB2);
 384:	84 b1       	in	r24, 0x04	; 4
 386:	86 60       	ori	r24, 0x06	; 6
 388:	84 b9       	out	0x04, r24	; 4
	
	// Chip select pin set high:
	DDRB |= (1 << DDB0)|(1<<DDB7);
 38a:	84 b1       	in	r24, 0x04	; 4
 38c:	81 68       	ori	r24, 0x81	; 129
 38e:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DDB0);
 390:	28 9a       	sbi	0x05, 0	; 5
	
	// Set mode to "Master"
	SPCR |= (1 << MSTR);
 392:	8c b5       	in	r24, 0x2c	; 44
 394:	80 61       	ori	r24, 0x10	; 16
 396:	8c bd       	out	0x2c, r24	; 44
	// Set clock rate to fck/16
	SPCR |= (1 << SPR0);
 398:	8c b5       	in	r24, 0x2c	; 44
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	8c bd       	out	0x2c, r24	; 44
	// Enable SPI
	SPCR |= (1 << SPE);
 39e:	8c b5       	in	r24, 0x2c	; 44
 3a0:	80 64       	ori	r24, 0x40	; 64
 3a2:	8c bd       	out	0x2c, r24	; 44
 3a4:	08 95       	ret

000003a6 <spi_transmit>:


void spi_transmit(char data){
	
	// Inputs data, start transmission
	SPDR = data;
 3a6:	8e bd       	out	0x2e, r24	; 46
	
	// Checks transmission complete flag
	while(!(SPSR & (1 << SPIF))){}
 3a8:	0d b4       	in	r0, 0x2d	; 45
 3aa:	07 fe       	sbrs	r0, 7
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <spi_transmit+0x2>
	
}
 3ae:	08 95       	ret

000003b0 <spi_read>:

char spi_read() {
	return SPDR;
 3b0:	8e b5       	in	r24, 0x2e	; 46
}
 3b2:	08 95       	ret

000003b4 <UART_recieve>:
	UCSR0C |=(3 << UCSZ00);
}

unsigned char UART_recieve(){
	//Wait for data by checking received flag (RXC0):
	while (!(UCSR0A & (1 << RXC0)));
 3b4:	e0 ec       	ldi	r30, 0xC0	; 192
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	88 23       	and	r24, r24
 3bc:	ec f7       	brge	.-6      	; 0x3b8 <UART_recieve+0x4>
	
	//Get data from buffer (UDR0) and return:
	return UDR0;
 3be:	80 91 c6 00 	lds	r24, 0x00C6
}
 3c2:	08 95       	ret

000003c4 <UART_transmit>:

void UART_transmit(unsigned char arg){
	
	//Check if transmit buffer is ready to receive new data:
	while (!(UCSR0A & (1 << UDRE0)));
 3c4:	e0 ec       	ldi	r30, 0xC0	; 192
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	90 81       	ld	r25, Z
 3ca:	95 ff       	sbrs	r25, 5
 3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <UART_transmit+0x4>
	
	//Put data in transmit buffer:
	UDR0 = arg;
 3ce:	80 93 c6 00 	sts	0x00C6, r24
 3d2:	08 95       	ret

000003d4 <UART_init>:
#include <stdio.h>
#include <avr/interrupt.h>

void UART_init(int ubrr){
	//Set baud rate from input:
	UBRR0H = (unsigned char)(ubrr>>8);
 3d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 3d8:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable UART 0 receive (RXEN0) and transfer (TXEN0):
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 3dc:	e1 ec       	ldi	r30, 0xC1	; 193
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	88 61       	ori	r24, 0x18	; 24
 3e4:	80 83       	st	Z, r24
	
	//Set register select (URSEL0), stop bit select (USBS0), character size (UCSZ00) and uart mode (UMSEL0):
	UCSR0C |=(3 << UCSZ00);
 3e6:	e2 ec       	ldi	r30, 0xC2	; 194
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	86 60       	ori	r24, 0x06	; 6
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret

000003f2 <UART_parsePrint>:
	//Put data in transmit buffer:
	UDR0 = arg;
}

void UART_parsePrint(){
	fdevopen(UART_transmit, UART_recieve);
 3f2:	6a ed       	ldi	r22, 0xDA	; 218
 3f4:	71 e0       	ldi	r23, 0x01	; 1
 3f6:	82 ee       	ldi	r24, 0xE2	; 226
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <fdevopen>
 3fc:	08 95       	ret

000003fe <fdevopen>:
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ec 01       	movw	r28, r24
 408:	8b 01       	movw	r16, r22
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	31 f4       	brne	.+12     	; 0x41a <fdevopen+0x1c>
 40e:	61 15       	cp	r22, r1
 410:	71 05       	cpc	r23, r1
 412:	19 f4       	brne	.+6      	; 0x41a <fdevopen+0x1c>
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	37 c0       	rjmp	.+110    	; 0x488 <fdevopen+0x8a>
 41a:	6e e0       	ldi	r22, 0x0E	; 14
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	63 d2       	rcall	.+1222   	; 0x8ea <calloc>
 424:	fc 01       	movw	r30, r24
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	a9 f3       	breq	.-22     	; 0x414 <fdevopen+0x16>
 42a:	80 e8       	ldi	r24, 0x80	; 128
 42c:	83 83       	std	Z+3, r24	; 0x03
 42e:	01 15       	cp	r16, r1
 430:	11 05       	cpc	r17, r1
 432:	71 f0       	breq	.+28     	; 0x450 <fdevopen+0x52>
 434:	13 87       	std	Z+11, r17	; 0x0b
 436:	02 87       	std	Z+10, r16	; 0x0a
 438:	81 e8       	ldi	r24, 0x81	; 129
 43a:	83 83       	std	Z+3, r24	; 0x03
 43c:	80 91 3a 02 	lds	r24, 0x023A
 440:	90 91 3b 02 	lds	r25, 0x023B
 444:	89 2b       	or	r24, r25
 446:	21 f4       	brne	.+8      	; 0x450 <fdevopen+0x52>
 448:	f0 93 3b 02 	sts	0x023B, r31
 44c:	e0 93 3a 02 	sts	0x023A, r30
 450:	20 97       	sbiw	r28, 0x00	; 0
 452:	c9 f0       	breq	.+50     	; 0x486 <fdevopen+0x88>
 454:	d1 87       	std	Z+9, r29	; 0x09
 456:	c0 87       	std	Z+8, r28	; 0x08
 458:	83 81       	ldd	r24, Z+3	; 0x03
 45a:	82 60       	ori	r24, 0x02	; 2
 45c:	83 83       	std	Z+3, r24	; 0x03
 45e:	80 91 3c 02 	lds	r24, 0x023C
 462:	90 91 3d 02 	lds	r25, 0x023D
 466:	89 2b       	or	r24, r25
 468:	71 f4       	brne	.+28     	; 0x486 <fdevopen+0x88>
 46a:	f0 93 3d 02 	sts	0x023D, r31
 46e:	e0 93 3c 02 	sts	0x023C, r30
 472:	80 91 3e 02 	lds	r24, 0x023E
 476:	90 91 3f 02 	lds	r25, 0x023F
 47a:	89 2b       	or	r24, r25
 47c:	21 f4       	brne	.+8      	; 0x486 <fdevopen+0x88>
 47e:	f0 93 3f 02 	sts	0x023F, r31
 482:	e0 93 3e 02 	sts	0x023E, r30
 486:	cf 01       	movw	r24, r30
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	08 95       	ret

00000492 <printf>:
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	fe 01       	movw	r30, r28
 49c:	36 96       	adiw	r30, 0x06	; 6
 49e:	61 91       	ld	r22, Z+
 4a0:	71 91       	ld	r23, Z+
 4a2:	af 01       	movw	r20, r30
 4a4:	80 91 3c 02 	lds	r24, 0x023C
 4a8:	90 91 3d 02 	lds	r25, 0x023D
 4ac:	30 d0       	rcall	.+96     	; 0x50e <vfprintf>
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <puts>:
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	e0 91 3c 02 	lds	r30, 0x023C
 4c0:	f0 91 3d 02 	lds	r31, 0x023D
 4c4:	23 81       	ldd	r18, Z+3	; 0x03
 4c6:	21 ff       	sbrs	r18, 1
 4c8:	1b c0       	rjmp	.+54     	; 0x500 <puts+0x4c>
 4ca:	ec 01       	movw	r28, r24
 4cc:	00 e0       	ldi	r16, 0x00	; 0
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	89 91       	ld	r24, Y+
 4d2:	60 91 3c 02 	lds	r22, 0x023C
 4d6:	70 91 3d 02 	lds	r23, 0x023D
 4da:	db 01       	movw	r26, r22
 4dc:	18 96       	adiw	r26, 0x08	; 8
 4de:	ed 91       	ld	r30, X+
 4e0:	fc 91       	ld	r31, X
 4e2:	19 97       	sbiw	r26, 0x09	; 9
 4e4:	88 23       	and	r24, r24
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <puts+0x40>
 4e8:	19 95       	eicall
 4ea:	89 2b       	or	r24, r25
 4ec:	89 f3       	breq	.-30     	; 0x4d0 <puts+0x1c>
 4ee:	0f ef       	ldi	r16, 0xFF	; 255
 4f0:	1f ef       	ldi	r17, 0xFF	; 255
 4f2:	ee cf       	rjmp	.-36     	; 0x4d0 <puts+0x1c>
 4f4:	8a e0       	ldi	r24, 0x0A	; 10
 4f6:	19 95       	eicall
 4f8:	89 2b       	or	r24, r25
 4fa:	11 f4       	brne	.+4      	; 0x500 <puts+0x4c>
 4fc:	c8 01       	movw	r24, r16
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <puts+0x50>
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	9f ef       	ldi	r25, 0xFF	; 255
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	08 95       	ret

0000050e <vfprintf>:
 50e:	2f 92       	push	r2
 510:	3f 92       	push	r3
 512:	4f 92       	push	r4
 514:	5f 92       	push	r5
 516:	6f 92       	push	r6
 518:	7f 92       	push	r7
 51a:	8f 92       	push	r8
 51c:	9f 92       	push	r9
 51e:	af 92       	push	r10
 520:	bf 92       	push	r11
 522:	cf 92       	push	r12
 524:	df 92       	push	r13
 526:	ef 92       	push	r14
 528:	ff 92       	push	r15
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	2c 97       	sbiw	r28, 0x0c	; 12
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	7c 01       	movw	r14, r24
 544:	6b 01       	movw	r12, r22
 546:	8a 01       	movw	r16, r20
 548:	fc 01       	movw	r30, r24
 54a:	17 82       	std	Z+7, r1	; 0x07
 54c:	16 82       	std	Z+6, r1	; 0x06
 54e:	83 81       	ldd	r24, Z+3	; 0x03
 550:	81 ff       	sbrs	r24, 1
 552:	b0 c1       	rjmp	.+864    	; 0x8b4 <vfprintf+0x3a6>
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	4c 01       	movw	r8, r24
 55a:	f7 01       	movw	r30, r14
 55c:	93 81       	ldd	r25, Z+3	; 0x03
 55e:	f6 01       	movw	r30, r12
 560:	93 fd       	sbrc	r25, 3
 562:	85 91       	lpm	r24, Z+
 564:	93 ff       	sbrs	r25, 3
 566:	81 91       	ld	r24, Z+
 568:	6f 01       	movw	r12, r30
 56a:	88 23       	and	r24, r24
 56c:	09 f4       	brne	.+2      	; 0x570 <vfprintf+0x62>
 56e:	9e c1       	rjmp	.+828    	; 0x8ac <vfprintf+0x39e>
 570:	85 32       	cpi	r24, 0x25	; 37
 572:	39 f4       	brne	.+14     	; 0x582 <vfprintf+0x74>
 574:	93 fd       	sbrc	r25, 3
 576:	85 91       	lpm	r24, Z+
 578:	93 ff       	sbrs	r25, 3
 57a:	81 91       	ld	r24, Z+
 57c:	6f 01       	movw	r12, r30
 57e:	85 32       	cpi	r24, 0x25	; 37
 580:	21 f4       	brne	.+8      	; 0x58a <vfprintf+0x7c>
 582:	b7 01       	movw	r22, r14
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0f d3       	rcall	.+1566   	; 0xba6 <fputc>
 588:	e8 cf       	rjmp	.-48     	; 0x55a <vfprintf+0x4c>
 58a:	51 2c       	mov	r5, r1
 58c:	31 2c       	mov	r3, r1
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	20 32       	cpi	r18, 0x20	; 32
 592:	a0 f4       	brcc	.+40     	; 0x5bc <vfprintf+0xae>
 594:	8b 32       	cpi	r24, 0x2B	; 43
 596:	69 f0       	breq	.+26     	; 0x5b2 <vfprintf+0xa4>
 598:	30 f4       	brcc	.+12     	; 0x5a6 <vfprintf+0x98>
 59a:	80 32       	cpi	r24, 0x20	; 32
 59c:	59 f0       	breq	.+22     	; 0x5b4 <vfprintf+0xa6>
 59e:	83 32       	cpi	r24, 0x23	; 35
 5a0:	69 f4       	brne	.+26     	; 0x5bc <vfprintf+0xae>
 5a2:	20 61       	ori	r18, 0x10	; 16
 5a4:	2c c0       	rjmp	.+88     	; 0x5fe <vfprintf+0xf0>
 5a6:	8d 32       	cpi	r24, 0x2D	; 45
 5a8:	39 f0       	breq	.+14     	; 0x5b8 <vfprintf+0xaa>
 5aa:	80 33       	cpi	r24, 0x30	; 48
 5ac:	39 f4       	brne	.+14     	; 0x5bc <vfprintf+0xae>
 5ae:	21 60       	ori	r18, 0x01	; 1
 5b0:	26 c0       	rjmp	.+76     	; 0x5fe <vfprintf+0xf0>
 5b2:	22 60       	ori	r18, 0x02	; 2
 5b4:	24 60       	ori	r18, 0x04	; 4
 5b6:	23 c0       	rjmp	.+70     	; 0x5fe <vfprintf+0xf0>
 5b8:	28 60       	ori	r18, 0x08	; 8
 5ba:	21 c0       	rjmp	.+66     	; 0x5fe <vfprintf+0xf0>
 5bc:	27 fd       	sbrc	r18, 7
 5be:	27 c0       	rjmp	.+78     	; 0x60e <vfprintf+0x100>
 5c0:	30 ed       	ldi	r19, 0xD0	; 208
 5c2:	38 0f       	add	r19, r24
 5c4:	3a 30       	cpi	r19, 0x0A	; 10
 5c6:	78 f4       	brcc	.+30     	; 0x5e6 <vfprintf+0xd8>
 5c8:	26 ff       	sbrs	r18, 6
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <vfprintf+0xca>
 5cc:	fa e0       	ldi	r31, 0x0A	; 10
 5ce:	5f 9e       	mul	r5, r31
 5d0:	30 0d       	add	r19, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	53 2e       	mov	r5, r19
 5d6:	13 c0       	rjmp	.+38     	; 0x5fe <vfprintf+0xf0>
 5d8:	8a e0       	ldi	r24, 0x0A	; 10
 5da:	38 9e       	mul	r3, r24
 5dc:	30 0d       	add	r19, r0
 5de:	11 24       	eor	r1, r1
 5e0:	33 2e       	mov	r3, r19
 5e2:	20 62       	ori	r18, 0x20	; 32
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <vfprintf+0xf0>
 5e6:	8e 32       	cpi	r24, 0x2E	; 46
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <vfprintf+0xe4>
 5ea:	26 fd       	sbrc	r18, 6
 5ec:	5f c1       	rjmp	.+702    	; 0x8ac <vfprintf+0x39e>
 5ee:	20 64       	ori	r18, 0x40	; 64
 5f0:	06 c0       	rjmp	.+12     	; 0x5fe <vfprintf+0xf0>
 5f2:	8c 36       	cpi	r24, 0x6C	; 108
 5f4:	11 f4       	brne	.+4      	; 0x5fa <vfprintf+0xec>
 5f6:	20 68       	ori	r18, 0x80	; 128
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <vfprintf+0xf0>
 5fa:	88 36       	cpi	r24, 0x68	; 104
 5fc:	41 f4       	brne	.+16     	; 0x60e <vfprintf+0x100>
 5fe:	f6 01       	movw	r30, r12
 600:	93 fd       	sbrc	r25, 3
 602:	85 91       	lpm	r24, Z+
 604:	93 ff       	sbrs	r25, 3
 606:	81 91       	ld	r24, Z+
 608:	6f 01       	movw	r12, r30
 60a:	81 11       	cpse	r24, r1
 60c:	c1 cf       	rjmp	.-126    	; 0x590 <vfprintf+0x82>
 60e:	98 2f       	mov	r25, r24
 610:	9f 7d       	andi	r25, 0xDF	; 223
 612:	95 54       	subi	r25, 0x45	; 69
 614:	93 30       	cpi	r25, 0x03	; 3
 616:	28 f4       	brcc	.+10     	; 0x622 <vfprintf+0x114>
 618:	0c 5f       	subi	r16, 0xFC	; 252
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	ff e3       	ldi	r31, 0x3F	; 63
 61e:	f9 83       	std	Y+1, r31	; 0x01
 620:	0d c0       	rjmp	.+26     	; 0x63c <vfprintf+0x12e>
 622:	83 36       	cpi	r24, 0x63	; 99
 624:	31 f0       	breq	.+12     	; 0x632 <vfprintf+0x124>
 626:	83 37       	cpi	r24, 0x73	; 115
 628:	71 f0       	breq	.+28     	; 0x646 <vfprintf+0x138>
 62a:	83 35       	cpi	r24, 0x53	; 83
 62c:	09 f0       	breq	.+2      	; 0x630 <vfprintf+0x122>
 62e:	57 c0       	rjmp	.+174    	; 0x6de <vfprintf+0x1d0>
 630:	21 c0       	rjmp	.+66     	; 0x674 <vfprintf+0x166>
 632:	f8 01       	movw	r30, r16
 634:	80 81       	ld	r24, Z
 636:	89 83       	std	Y+1, r24	; 0x01
 638:	0e 5f       	subi	r16, 0xFE	; 254
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	44 24       	eor	r4, r4
 63e:	43 94       	inc	r4
 640:	51 2c       	mov	r5, r1
 642:	54 01       	movw	r10, r8
 644:	14 c0       	rjmp	.+40     	; 0x66e <vfprintf+0x160>
 646:	38 01       	movw	r6, r16
 648:	f2 e0       	ldi	r31, 0x02	; 2
 64a:	6f 0e       	add	r6, r31
 64c:	71 1c       	adc	r7, r1
 64e:	f8 01       	movw	r30, r16
 650:	a0 80       	ld	r10, Z
 652:	b1 80       	ldd	r11, Z+1	; 0x01
 654:	26 ff       	sbrs	r18, 6
 656:	03 c0       	rjmp	.+6      	; 0x65e <vfprintf+0x150>
 658:	65 2d       	mov	r22, r5
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <vfprintf+0x154>
 65e:	6f ef       	ldi	r22, 0xFF	; 255
 660:	7f ef       	ldi	r23, 0xFF	; 255
 662:	c5 01       	movw	r24, r10
 664:	2c 87       	std	Y+12, r18	; 0x0c
 666:	94 d2       	rcall	.+1320   	; 0xb90 <strnlen>
 668:	2c 01       	movw	r4, r24
 66a:	83 01       	movw	r16, r6
 66c:	2c 85       	ldd	r18, Y+12	; 0x0c
 66e:	2f 77       	andi	r18, 0x7F	; 127
 670:	22 2e       	mov	r2, r18
 672:	16 c0       	rjmp	.+44     	; 0x6a0 <vfprintf+0x192>
 674:	38 01       	movw	r6, r16
 676:	f2 e0       	ldi	r31, 0x02	; 2
 678:	6f 0e       	add	r6, r31
 67a:	71 1c       	adc	r7, r1
 67c:	f8 01       	movw	r30, r16
 67e:	a0 80       	ld	r10, Z
 680:	b1 80       	ldd	r11, Z+1	; 0x01
 682:	26 ff       	sbrs	r18, 6
 684:	03 c0       	rjmp	.+6      	; 0x68c <vfprintf+0x17e>
 686:	65 2d       	mov	r22, r5
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <vfprintf+0x182>
 68c:	6f ef       	ldi	r22, 0xFF	; 255
 68e:	7f ef       	ldi	r23, 0xFF	; 255
 690:	c5 01       	movw	r24, r10
 692:	2c 87       	std	Y+12, r18	; 0x0c
 694:	6b d2       	rcall	.+1238   	; 0xb6c <strnlen_P>
 696:	2c 01       	movw	r4, r24
 698:	2c 85       	ldd	r18, Y+12	; 0x0c
 69a:	20 68       	ori	r18, 0x80	; 128
 69c:	22 2e       	mov	r2, r18
 69e:	83 01       	movw	r16, r6
 6a0:	23 fc       	sbrc	r2, 3
 6a2:	19 c0       	rjmp	.+50     	; 0x6d6 <vfprintf+0x1c8>
 6a4:	83 2d       	mov	r24, r3
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	48 16       	cp	r4, r24
 6aa:	59 06       	cpc	r5, r25
 6ac:	a0 f4       	brcc	.+40     	; 0x6d6 <vfprintf+0x1c8>
 6ae:	b7 01       	movw	r22, r14
 6b0:	80 e2       	ldi	r24, 0x20	; 32
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	78 d2       	rcall	.+1264   	; 0xba6 <fputc>
 6b6:	3a 94       	dec	r3
 6b8:	f5 cf       	rjmp	.-22     	; 0x6a4 <vfprintf+0x196>
 6ba:	f5 01       	movw	r30, r10
 6bc:	27 fc       	sbrc	r2, 7
 6be:	85 91       	lpm	r24, Z+
 6c0:	27 fe       	sbrs	r2, 7
 6c2:	81 91       	ld	r24, Z+
 6c4:	5f 01       	movw	r10, r30
 6c6:	b7 01       	movw	r22, r14
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	6d d2       	rcall	.+1242   	; 0xba6 <fputc>
 6cc:	31 10       	cpse	r3, r1
 6ce:	3a 94       	dec	r3
 6d0:	f1 e0       	ldi	r31, 0x01	; 1
 6d2:	4f 1a       	sub	r4, r31
 6d4:	51 08       	sbc	r5, r1
 6d6:	41 14       	cp	r4, r1
 6d8:	51 04       	cpc	r5, r1
 6da:	79 f7       	brne	.-34     	; 0x6ba <vfprintf+0x1ac>
 6dc:	de c0       	rjmp	.+444    	; 0x89a <vfprintf+0x38c>
 6de:	84 36       	cpi	r24, 0x64	; 100
 6e0:	11 f0       	breq	.+4      	; 0x6e6 <vfprintf+0x1d8>
 6e2:	89 36       	cpi	r24, 0x69	; 105
 6e4:	31 f5       	brne	.+76     	; 0x732 <vfprintf+0x224>
 6e6:	f8 01       	movw	r30, r16
 6e8:	27 ff       	sbrs	r18, 7
 6ea:	07 c0       	rjmp	.+14     	; 0x6fa <vfprintf+0x1ec>
 6ec:	60 81       	ld	r22, Z
 6ee:	71 81       	ldd	r23, Z+1	; 0x01
 6f0:	82 81       	ldd	r24, Z+2	; 0x02
 6f2:	93 81       	ldd	r25, Z+3	; 0x03
 6f4:	0c 5f       	subi	r16, 0xFC	; 252
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <vfprintf+0x1fc>
 6fa:	60 81       	ld	r22, Z
 6fc:	71 81       	ldd	r23, Z+1	; 0x01
 6fe:	88 27       	eor	r24, r24
 700:	77 fd       	sbrc	r23, 7
 702:	80 95       	com	r24
 704:	98 2f       	mov	r25, r24
 706:	0e 5f       	subi	r16, 0xFE	; 254
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	2f 76       	andi	r18, 0x6F	; 111
 70c:	b2 2e       	mov	r11, r18
 70e:	97 ff       	sbrs	r25, 7
 710:	09 c0       	rjmp	.+18     	; 0x724 <vfprintf+0x216>
 712:	90 95       	com	r25
 714:	80 95       	com	r24
 716:	70 95       	com	r23
 718:	61 95       	neg	r22
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	20 68       	ori	r18, 0x80	; 128
 722:	b2 2e       	mov	r11, r18
 724:	2a e0       	ldi	r18, 0x0A	; 10
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	a4 01       	movw	r20, r8
 72a:	6f d2       	rcall	.+1246   	; 0xc0a <__ultoa_invert>
 72c:	a8 2e       	mov	r10, r24
 72e:	a8 18       	sub	r10, r8
 730:	43 c0       	rjmp	.+134    	; 0x7b8 <vfprintf+0x2aa>
 732:	85 37       	cpi	r24, 0x75	; 117
 734:	29 f4       	brne	.+10     	; 0x740 <vfprintf+0x232>
 736:	2f 7e       	andi	r18, 0xEF	; 239
 738:	b2 2e       	mov	r11, r18
 73a:	2a e0       	ldi	r18, 0x0A	; 10
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	25 c0       	rjmp	.+74     	; 0x78a <vfprintf+0x27c>
 740:	f2 2f       	mov	r31, r18
 742:	f9 7f       	andi	r31, 0xF9	; 249
 744:	bf 2e       	mov	r11, r31
 746:	8f 36       	cpi	r24, 0x6F	; 111
 748:	c1 f0       	breq	.+48     	; 0x77a <vfprintf+0x26c>
 74a:	18 f4       	brcc	.+6      	; 0x752 <vfprintf+0x244>
 74c:	88 35       	cpi	r24, 0x58	; 88
 74e:	79 f0       	breq	.+30     	; 0x76e <vfprintf+0x260>
 750:	ad c0       	rjmp	.+346    	; 0x8ac <vfprintf+0x39e>
 752:	80 37       	cpi	r24, 0x70	; 112
 754:	19 f0       	breq	.+6      	; 0x75c <vfprintf+0x24e>
 756:	88 37       	cpi	r24, 0x78	; 120
 758:	21 f0       	breq	.+8      	; 0x762 <vfprintf+0x254>
 75a:	a8 c0       	rjmp	.+336    	; 0x8ac <vfprintf+0x39e>
 75c:	2f 2f       	mov	r18, r31
 75e:	20 61       	ori	r18, 0x10	; 16
 760:	b2 2e       	mov	r11, r18
 762:	b4 fe       	sbrs	r11, 4
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x272>
 766:	8b 2d       	mov	r24, r11
 768:	84 60       	ori	r24, 0x04	; 4
 76a:	b8 2e       	mov	r11, r24
 76c:	09 c0       	rjmp	.+18     	; 0x780 <vfprintf+0x272>
 76e:	24 ff       	sbrs	r18, 4
 770:	0a c0       	rjmp	.+20     	; 0x786 <vfprintf+0x278>
 772:	9f 2f       	mov	r25, r31
 774:	96 60       	ori	r25, 0x06	; 6
 776:	b9 2e       	mov	r11, r25
 778:	06 c0       	rjmp	.+12     	; 0x786 <vfprintf+0x278>
 77a:	28 e0       	ldi	r18, 0x08	; 8
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	05 c0       	rjmp	.+10     	; 0x78a <vfprintf+0x27c>
 780:	20 e1       	ldi	r18, 0x10	; 16
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x27c>
 786:	20 e1       	ldi	r18, 0x10	; 16
 788:	32 e0       	ldi	r19, 0x02	; 2
 78a:	f8 01       	movw	r30, r16
 78c:	b7 fe       	sbrs	r11, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x290>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <vfprintf+0x29c>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	a4 01       	movw	r20, r8
 7ac:	2e d2       	rcall	.+1116   	; 0xc0a <__ultoa_invert>
 7ae:	a8 2e       	mov	r10, r24
 7b0:	a8 18       	sub	r10, r8
 7b2:	fb 2d       	mov	r31, r11
 7b4:	ff 77       	andi	r31, 0x7F	; 127
 7b6:	bf 2e       	mov	r11, r31
 7b8:	b6 fe       	sbrs	r11, 6
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <vfprintf+0x2c4>
 7bc:	2b 2d       	mov	r18, r11
 7be:	2e 7f       	andi	r18, 0xFE	; 254
 7c0:	a5 14       	cp	r10, r5
 7c2:	50 f4       	brcc	.+20     	; 0x7d8 <vfprintf+0x2ca>
 7c4:	b4 fe       	sbrs	r11, 4
 7c6:	0a c0       	rjmp	.+20     	; 0x7dc <vfprintf+0x2ce>
 7c8:	b2 fc       	sbrc	r11, 2
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <vfprintf+0x2ce>
 7cc:	2b 2d       	mov	r18, r11
 7ce:	2e 7e       	andi	r18, 0xEE	; 238
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <vfprintf+0x2ce>
 7d2:	7a 2c       	mov	r7, r10
 7d4:	2b 2d       	mov	r18, r11
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x2d0>
 7d8:	7a 2c       	mov	r7, r10
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x2d0>
 7dc:	75 2c       	mov	r7, r5
 7de:	24 ff       	sbrs	r18, 4
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x2ee>
 7e2:	fe 01       	movw	r30, r28
 7e4:	ea 0d       	add	r30, r10
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <vfprintf+0x2e4>
 7ee:	29 7e       	andi	r18, 0xE9	; 233
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <vfprintf+0x2f6>
 7f2:	22 ff       	sbrs	r18, 2
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x2f4>
 7f6:	73 94       	inc	r7
 7f8:	73 94       	inc	r7
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <vfprintf+0x2f6>
 7fc:	82 2f       	mov	r24, r18
 7fe:	86 78       	andi	r24, 0x86	; 134
 800:	09 f0       	breq	.+2      	; 0x804 <vfprintf+0x2f6>
 802:	73 94       	inc	r7
 804:	23 fd       	sbrc	r18, 3
 806:	12 c0       	rjmp	.+36     	; 0x82c <vfprintf+0x31e>
 808:	20 ff       	sbrs	r18, 0
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x30a>
 80c:	5a 2c       	mov	r5, r10
 80e:	73 14       	cp	r7, r3
 810:	18 f4       	brcc	.+6      	; 0x818 <vfprintf+0x30a>
 812:	53 0c       	add	r5, r3
 814:	57 18       	sub	r5, r7
 816:	73 2c       	mov	r7, r3
 818:	73 14       	cp	r7, r3
 81a:	60 f4       	brcc	.+24     	; 0x834 <vfprintf+0x326>
 81c:	b7 01       	movw	r22, r14
 81e:	80 e2       	ldi	r24, 0x20	; 32
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	2c 87       	std	Y+12, r18	; 0x0c
 824:	c0 d1       	rcall	.+896    	; 0xba6 <fputc>
 826:	73 94       	inc	r7
 828:	2c 85       	ldd	r18, Y+12	; 0x0c
 82a:	f6 cf       	rjmp	.-20     	; 0x818 <vfprintf+0x30a>
 82c:	73 14       	cp	r7, r3
 82e:	10 f4       	brcc	.+4      	; 0x834 <vfprintf+0x326>
 830:	37 18       	sub	r3, r7
 832:	01 c0       	rjmp	.+2      	; 0x836 <vfprintf+0x328>
 834:	31 2c       	mov	r3, r1
 836:	24 ff       	sbrs	r18, 4
 838:	11 c0       	rjmp	.+34     	; 0x85c <vfprintf+0x34e>
 83a:	b7 01       	movw	r22, r14
 83c:	80 e3       	ldi	r24, 0x30	; 48
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	2c 87       	std	Y+12, r18	; 0x0c
 842:	b1 d1       	rcall	.+866    	; 0xba6 <fputc>
 844:	2c 85       	ldd	r18, Y+12	; 0x0c
 846:	22 ff       	sbrs	r18, 2
 848:	16 c0       	rjmp	.+44     	; 0x876 <vfprintf+0x368>
 84a:	21 ff       	sbrs	r18, 1
 84c:	03 c0       	rjmp	.+6      	; 0x854 <vfprintf+0x346>
 84e:	88 e5       	ldi	r24, 0x58	; 88
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x34a>
 854:	88 e7       	ldi	r24, 0x78	; 120
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	b7 01       	movw	r22, r14
 85a:	0c c0       	rjmp	.+24     	; 0x874 <vfprintf+0x366>
 85c:	82 2f       	mov	r24, r18
 85e:	86 78       	andi	r24, 0x86	; 134
 860:	51 f0       	breq	.+20     	; 0x876 <vfprintf+0x368>
 862:	21 fd       	sbrc	r18, 1
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x35c>
 866:	80 e2       	ldi	r24, 0x20	; 32
 868:	01 c0       	rjmp	.+2      	; 0x86c <vfprintf+0x35e>
 86a:	8b e2       	ldi	r24, 0x2B	; 43
 86c:	27 fd       	sbrc	r18, 7
 86e:	8d e2       	ldi	r24, 0x2D	; 45
 870:	b7 01       	movw	r22, r14
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	98 d1       	rcall	.+816    	; 0xba6 <fputc>
 876:	a5 14       	cp	r10, r5
 878:	30 f4       	brcc	.+12     	; 0x886 <vfprintf+0x378>
 87a:	b7 01       	movw	r22, r14
 87c:	80 e3       	ldi	r24, 0x30	; 48
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	92 d1       	rcall	.+804    	; 0xba6 <fputc>
 882:	5a 94       	dec	r5
 884:	f8 cf       	rjmp	.-16     	; 0x876 <vfprintf+0x368>
 886:	aa 94       	dec	r10
 888:	f4 01       	movw	r30, r8
 88a:	ea 0d       	add	r30, r10
 88c:	f1 1d       	adc	r31, r1
 88e:	80 81       	ld	r24, Z
 890:	b7 01       	movw	r22, r14
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	88 d1       	rcall	.+784    	; 0xba6 <fputc>
 896:	a1 10       	cpse	r10, r1
 898:	f6 cf       	rjmp	.-20     	; 0x886 <vfprintf+0x378>
 89a:	33 20       	and	r3, r3
 89c:	09 f4       	brne	.+2      	; 0x8a0 <vfprintf+0x392>
 89e:	5d ce       	rjmp	.-838    	; 0x55a <vfprintf+0x4c>
 8a0:	b7 01       	movw	r22, r14
 8a2:	80 e2       	ldi	r24, 0x20	; 32
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	7f d1       	rcall	.+766    	; 0xba6 <fputc>
 8a8:	3a 94       	dec	r3
 8aa:	f7 cf       	rjmp	.-18     	; 0x89a <vfprintf+0x38c>
 8ac:	f7 01       	movw	r30, r14
 8ae:	86 81       	ldd	r24, Z+6	; 0x06
 8b0:	97 81       	ldd	r25, Z+7	; 0x07
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0x3aa>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	2c 96       	adiw	r28, 0x0c	; 12
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	f8 94       	cli
 8be:	de bf       	out	0x3e, r29	; 62
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	cd bf       	out	0x3d, r28	; 61
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	bf 90       	pop	r11
 8d6:	af 90       	pop	r10
 8d8:	9f 90       	pop	r9
 8da:	8f 90       	pop	r8
 8dc:	7f 90       	pop	r7
 8de:	6f 90       	pop	r6
 8e0:	5f 90       	pop	r5
 8e2:	4f 90       	pop	r4
 8e4:	3f 90       	pop	r3
 8e6:	2f 90       	pop	r2
 8e8:	08 95       	ret

000008ea <calloc>:
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	86 9f       	mul	r24, r22
 8f4:	80 01       	movw	r16, r0
 8f6:	87 9f       	mul	r24, r23
 8f8:	10 0d       	add	r17, r0
 8fa:	96 9f       	mul	r25, r22
 8fc:	10 0d       	add	r17, r0
 8fe:	11 24       	eor	r1, r1
 900:	c8 01       	movw	r24, r16
 902:	0d d0       	rcall	.+26     	; 0x91e <malloc>
 904:	ec 01       	movw	r28, r24
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	21 f0       	breq	.+8      	; 0x912 <calloc+0x28>
 90a:	a8 01       	movw	r20, r16
 90c:	60 e0       	ldi	r22, 0x00	; 0
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	38 d1       	rcall	.+624    	; 0xb82 <memset>
 912:	ce 01       	movw	r24, r28
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret

0000091e <malloc>:
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	82 30       	cpi	r24, 0x02	; 2
 924:	91 05       	cpc	r25, r1
 926:	10 f4       	brcc	.+4      	; 0x92c <malloc+0xe>
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	e0 91 42 02 	lds	r30, 0x0242
 930:	f0 91 43 02 	lds	r31, 0x0243
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	a0 e0       	ldi	r26, 0x00	; 0
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	30 97       	sbiw	r30, 0x00	; 0
 93e:	39 f1       	breq	.+78     	; 0x98e <malloc+0x70>
 940:	40 81       	ld	r20, Z
 942:	51 81       	ldd	r21, Z+1	; 0x01
 944:	48 17       	cp	r20, r24
 946:	59 07       	cpc	r21, r25
 948:	b8 f0       	brcs	.+46     	; 0x978 <malloc+0x5a>
 94a:	48 17       	cp	r20, r24
 94c:	59 07       	cpc	r21, r25
 94e:	71 f4       	brne	.+28     	; 0x96c <malloc+0x4e>
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	93 81       	ldd	r25, Z+3	; 0x03
 954:	10 97       	sbiw	r26, 0x00	; 0
 956:	29 f0       	breq	.+10     	; 0x962 <malloc+0x44>
 958:	13 96       	adiw	r26, 0x03	; 3
 95a:	9c 93       	st	X, r25
 95c:	8e 93       	st	-X, r24
 95e:	12 97       	sbiw	r26, 0x02	; 2
 960:	2c c0       	rjmp	.+88     	; 0x9ba <malloc+0x9c>
 962:	90 93 43 02 	sts	0x0243, r25
 966:	80 93 42 02 	sts	0x0242, r24
 96a:	27 c0       	rjmp	.+78     	; 0x9ba <malloc+0x9c>
 96c:	21 15       	cp	r18, r1
 96e:	31 05       	cpc	r19, r1
 970:	31 f0       	breq	.+12     	; 0x97e <malloc+0x60>
 972:	42 17       	cp	r20, r18
 974:	53 07       	cpc	r21, r19
 976:	18 f0       	brcs	.+6      	; 0x97e <malloc+0x60>
 978:	a9 01       	movw	r20, r18
 97a:	db 01       	movw	r26, r22
 97c:	01 c0       	rjmp	.+2      	; 0x980 <malloc+0x62>
 97e:	ef 01       	movw	r28, r30
 980:	9a 01       	movw	r18, r20
 982:	bd 01       	movw	r22, r26
 984:	df 01       	movw	r26, r30
 986:	02 80       	ldd	r0, Z+2	; 0x02
 988:	f3 81       	ldd	r31, Z+3	; 0x03
 98a:	e0 2d       	mov	r30, r0
 98c:	d7 cf       	rjmp	.-82     	; 0x93c <malloc+0x1e>
 98e:	21 15       	cp	r18, r1
 990:	31 05       	cpc	r19, r1
 992:	f9 f0       	breq	.+62     	; 0x9d2 <malloc+0xb4>
 994:	28 1b       	sub	r18, r24
 996:	39 0b       	sbc	r19, r25
 998:	24 30       	cpi	r18, 0x04	; 4
 99a:	31 05       	cpc	r19, r1
 99c:	80 f4       	brcc	.+32     	; 0x9be <malloc+0xa0>
 99e:	8a 81       	ldd	r24, Y+2	; 0x02
 9a0:	9b 81       	ldd	r25, Y+3	; 0x03
 9a2:	61 15       	cp	r22, r1
 9a4:	71 05       	cpc	r23, r1
 9a6:	21 f0       	breq	.+8      	; 0x9b0 <malloc+0x92>
 9a8:	fb 01       	movw	r30, r22
 9aa:	93 83       	std	Z+3, r25	; 0x03
 9ac:	82 83       	std	Z+2, r24	; 0x02
 9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <malloc+0x9a>
 9b0:	90 93 43 02 	sts	0x0243, r25
 9b4:	80 93 42 02 	sts	0x0242, r24
 9b8:	fe 01       	movw	r30, r28
 9ba:	32 96       	adiw	r30, 0x02	; 2
 9bc:	44 c0       	rjmp	.+136    	; 0xa46 <malloc+0x128>
 9be:	fe 01       	movw	r30, r28
 9c0:	e2 0f       	add	r30, r18
 9c2:	f3 1f       	adc	r31, r19
 9c4:	81 93       	st	Z+, r24
 9c6:	91 93       	st	Z+, r25
 9c8:	22 50       	subi	r18, 0x02	; 2
 9ca:	31 09       	sbc	r19, r1
 9cc:	39 83       	std	Y+1, r19	; 0x01
 9ce:	28 83       	st	Y, r18
 9d0:	3a c0       	rjmp	.+116    	; 0xa46 <malloc+0x128>
 9d2:	20 91 40 02 	lds	r18, 0x0240
 9d6:	30 91 41 02 	lds	r19, 0x0241
 9da:	23 2b       	or	r18, r19
 9dc:	41 f4       	brne	.+16     	; 0x9ee <malloc+0xd0>
 9de:	20 91 02 02 	lds	r18, 0x0202
 9e2:	30 91 03 02 	lds	r19, 0x0203
 9e6:	30 93 41 02 	sts	0x0241, r19
 9ea:	20 93 40 02 	sts	0x0240, r18
 9ee:	20 91 00 02 	lds	r18, 0x0200
 9f2:	30 91 01 02 	lds	r19, 0x0201
 9f6:	21 15       	cp	r18, r1
 9f8:	31 05       	cpc	r19, r1
 9fa:	41 f4       	brne	.+16     	; 0xa0c <malloc+0xee>
 9fc:	2d b7       	in	r18, 0x3d	; 61
 9fe:	3e b7       	in	r19, 0x3e	; 62
 a00:	40 91 04 02 	lds	r20, 0x0204
 a04:	50 91 05 02 	lds	r21, 0x0205
 a08:	24 1b       	sub	r18, r20
 a0a:	35 0b       	sbc	r19, r21
 a0c:	e0 91 40 02 	lds	r30, 0x0240
 a10:	f0 91 41 02 	lds	r31, 0x0241
 a14:	e2 17       	cp	r30, r18
 a16:	f3 07       	cpc	r31, r19
 a18:	a0 f4       	brcc	.+40     	; 0xa42 <malloc+0x124>
 a1a:	2e 1b       	sub	r18, r30
 a1c:	3f 0b       	sbc	r19, r31
 a1e:	28 17       	cp	r18, r24
 a20:	39 07       	cpc	r19, r25
 a22:	78 f0       	brcs	.+30     	; 0xa42 <malloc+0x124>
 a24:	ac 01       	movw	r20, r24
 a26:	4e 5f       	subi	r20, 0xFE	; 254
 a28:	5f 4f       	sbci	r21, 0xFF	; 255
 a2a:	24 17       	cp	r18, r20
 a2c:	35 07       	cpc	r19, r21
 a2e:	48 f0       	brcs	.+18     	; 0xa42 <malloc+0x124>
 a30:	4e 0f       	add	r20, r30
 a32:	5f 1f       	adc	r21, r31
 a34:	50 93 41 02 	sts	0x0241, r21
 a38:	40 93 40 02 	sts	0x0240, r20
 a3c:	81 93       	st	Z+, r24
 a3e:	91 93       	st	Z+, r25
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <malloc+0x128>
 a42:	e0 e0       	ldi	r30, 0x00	; 0
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	cf 01       	movw	r24, r30
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	08 95       	ret

00000a4e <free>:
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	09 f4       	brne	.+2      	; 0xa58 <free+0xa>
 a56:	87 c0       	rjmp	.+270    	; 0xb66 <free+0x118>
 a58:	fc 01       	movw	r30, r24
 a5a:	32 97       	sbiw	r30, 0x02	; 2
 a5c:	13 82       	std	Z+3, r1	; 0x03
 a5e:	12 82       	std	Z+2, r1	; 0x02
 a60:	c0 91 42 02 	lds	r28, 0x0242
 a64:	d0 91 43 02 	lds	r29, 0x0243
 a68:	20 97       	sbiw	r28, 0x00	; 0
 a6a:	81 f4       	brne	.+32     	; 0xa8c <free+0x3e>
 a6c:	20 81       	ld	r18, Z
 a6e:	31 81       	ldd	r19, Z+1	; 0x01
 a70:	28 0f       	add	r18, r24
 a72:	39 1f       	adc	r19, r25
 a74:	80 91 40 02 	lds	r24, 0x0240
 a78:	90 91 41 02 	lds	r25, 0x0241
 a7c:	82 17       	cp	r24, r18
 a7e:	93 07       	cpc	r25, r19
 a80:	79 f5       	brne	.+94     	; 0xae0 <free+0x92>
 a82:	f0 93 41 02 	sts	0x0241, r31
 a86:	e0 93 40 02 	sts	0x0240, r30
 a8a:	6d c0       	rjmp	.+218    	; 0xb66 <free+0x118>
 a8c:	de 01       	movw	r26, r28
 a8e:	20 e0       	ldi	r18, 0x00	; 0
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	ae 17       	cp	r26, r30
 a94:	bf 07       	cpc	r27, r31
 a96:	50 f4       	brcc	.+20     	; 0xaac <free+0x5e>
 a98:	12 96       	adiw	r26, 0x02	; 2
 a9a:	4d 91       	ld	r20, X+
 a9c:	5c 91       	ld	r21, X
 a9e:	13 97       	sbiw	r26, 0x03	; 3
 aa0:	9d 01       	movw	r18, r26
 aa2:	41 15       	cp	r20, r1
 aa4:	51 05       	cpc	r21, r1
 aa6:	09 f1       	breq	.+66     	; 0xaea <free+0x9c>
 aa8:	da 01       	movw	r26, r20
 aaa:	f3 cf       	rjmp	.-26     	; 0xa92 <free+0x44>
 aac:	b3 83       	std	Z+3, r27	; 0x03
 aae:	a2 83       	std	Z+2, r26	; 0x02
 ab0:	40 81       	ld	r20, Z
 ab2:	51 81       	ldd	r21, Z+1	; 0x01
 ab4:	84 0f       	add	r24, r20
 ab6:	95 1f       	adc	r25, r21
 ab8:	8a 17       	cp	r24, r26
 aba:	9b 07       	cpc	r25, r27
 abc:	71 f4       	brne	.+28     	; 0xada <free+0x8c>
 abe:	8d 91       	ld	r24, X+
 ac0:	9c 91       	ld	r25, X
 ac2:	11 97       	sbiw	r26, 0x01	; 1
 ac4:	84 0f       	add	r24, r20
 ac6:	95 1f       	adc	r25, r21
 ac8:	02 96       	adiw	r24, 0x02	; 2
 aca:	91 83       	std	Z+1, r25	; 0x01
 acc:	80 83       	st	Z, r24
 ace:	12 96       	adiw	r26, 0x02	; 2
 ad0:	8d 91       	ld	r24, X+
 ad2:	9c 91       	ld	r25, X
 ad4:	13 97       	sbiw	r26, 0x03	; 3
 ad6:	93 83       	std	Z+3, r25	; 0x03
 ad8:	82 83       	std	Z+2, r24	; 0x02
 ada:	21 15       	cp	r18, r1
 adc:	31 05       	cpc	r19, r1
 ade:	29 f4       	brne	.+10     	; 0xaea <free+0x9c>
 ae0:	f0 93 43 02 	sts	0x0243, r31
 ae4:	e0 93 42 02 	sts	0x0242, r30
 ae8:	3e c0       	rjmp	.+124    	; 0xb66 <free+0x118>
 aea:	d9 01       	movw	r26, r18
 aec:	13 96       	adiw	r26, 0x03	; 3
 aee:	fc 93       	st	X, r31
 af0:	ee 93       	st	-X, r30
 af2:	12 97       	sbiw	r26, 0x02	; 2
 af4:	4d 91       	ld	r20, X+
 af6:	5d 91       	ld	r21, X+
 af8:	a4 0f       	add	r26, r20
 afa:	b5 1f       	adc	r27, r21
 afc:	ea 17       	cp	r30, r26
 afe:	fb 07       	cpc	r31, r27
 b00:	79 f4       	brne	.+30     	; 0xb20 <free+0xd2>
 b02:	80 81       	ld	r24, Z
 b04:	91 81       	ldd	r25, Z+1	; 0x01
 b06:	84 0f       	add	r24, r20
 b08:	95 1f       	adc	r25, r21
 b0a:	02 96       	adiw	r24, 0x02	; 2
 b0c:	d9 01       	movw	r26, r18
 b0e:	11 96       	adiw	r26, 0x01	; 1
 b10:	9c 93       	st	X, r25
 b12:	8e 93       	st	-X, r24
 b14:	82 81       	ldd	r24, Z+2	; 0x02
 b16:	93 81       	ldd	r25, Z+3	; 0x03
 b18:	13 96       	adiw	r26, 0x03	; 3
 b1a:	9c 93       	st	X, r25
 b1c:	8e 93       	st	-X, r24
 b1e:	12 97       	sbiw	r26, 0x02	; 2
 b20:	e0 e0       	ldi	r30, 0x00	; 0
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	8a 81       	ldd	r24, Y+2	; 0x02
 b26:	9b 81       	ldd	r25, Y+3	; 0x03
 b28:	00 97       	sbiw	r24, 0x00	; 0
 b2a:	19 f0       	breq	.+6      	; 0xb32 <free+0xe4>
 b2c:	fe 01       	movw	r30, r28
 b2e:	ec 01       	movw	r28, r24
 b30:	f9 cf       	rjmp	.-14     	; 0xb24 <free+0xd6>
 b32:	ce 01       	movw	r24, r28
 b34:	02 96       	adiw	r24, 0x02	; 2
 b36:	28 81       	ld	r18, Y
 b38:	39 81       	ldd	r19, Y+1	; 0x01
 b3a:	82 0f       	add	r24, r18
 b3c:	93 1f       	adc	r25, r19
 b3e:	20 91 40 02 	lds	r18, 0x0240
 b42:	30 91 41 02 	lds	r19, 0x0241
 b46:	28 17       	cp	r18, r24
 b48:	39 07       	cpc	r19, r25
 b4a:	69 f4       	brne	.+26     	; 0xb66 <free+0x118>
 b4c:	30 97       	sbiw	r30, 0x00	; 0
 b4e:	29 f4       	brne	.+10     	; 0xb5a <free+0x10c>
 b50:	10 92 43 02 	sts	0x0243, r1
 b54:	10 92 42 02 	sts	0x0242, r1
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <free+0x110>
 b5a:	13 82       	std	Z+3, r1	; 0x03
 b5c:	12 82       	std	Z+2, r1	; 0x02
 b5e:	d0 93 41 02 	sts	0x0241, r29
 b62:	c0 93 40 02 	sts	0x0240, r28
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	08 95       	ret

00000b6c <strnlen_P>:
 b6c:	fc 01       	movw	r30, r24
 b6e:	05 90       	lpm	r0, Z+
 b70:	61 50       	subi	r22, 0x01	; 1
 b72:	70 40       	sbci	r23, 0x00	; 0
 b74:	01 10       	cpse	r0, r1
 b76:	d8 f7       	brcc	.-10     	; 0xb6e <strnlen_P+0x2>
 b78:	80 95       	com	r24
 b7a:	90 95       	com	r25
 b7c:	8e 0f       	add	r24, r30
 b7e:	9f 1f       	adc	r25, r31
 b80:	08 95       	ret

00000b82 <memset>:
 b82:	dc 01       	movw	r26, r24
 b84:	01 c0       	rjmp	.+2      	; 0xb88 <memset+0x6>
 b86:	6d 93       	st	X+, r22
 b88:	41 50       	subi	r20, 0x01	; 1
 b8a:	50 40       	sbci	r21, 0x00	; 0
 b8c:	e0 f7       	brcc	.-8      	; 0xb86 <memset+0x4>
 b8e:	08 95       	ret

00000b90 <strnlen>:
 b90:	fc 01       	movw	r30, r24
 b92:	61 50       	subi	r22, 0x01	; 1
 b94:	70 40       	sbci	r23, 0x00	; 0
 b96:	01 90       	ld	r0, Z+
 b98:	01 10       	cpse	r0, r1
 b9a:	d8 f7       	brcc	.-10     	; 0xb92 <strnlen+0x2>
 b9c:	80 95       	com	r24
 b9e:	90 95       	com	r25
 ba0:	8e 0f       	add	r24, r30
 ba2:	9f 1f       	adc	r25, r31
 ba4:	08 95       	ret

00000ba6 <fputc>:
 ba6:	0f 93       	push	r16
 ba8:	1f 93       	push	r17
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	18 2f       	mov	r17, r24
 bb0:	09 2f       	mov	r16, r25
 bb2:	eb 01       	movw	r28, r22
 bb4:	8b 81       	ldd	r24, Y+3	; 0x03
 bb6:	81 fd       	sbrc	r24, 1
 bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <fputc+0x1a>
 bba:	8f ef       	ldi	r24, 0xFF	; 255
 bbc:	9f ef       	ldi	r25, 0xFF	; 255
 bbe:	20 c0       	rjmp	.+64     	; 0xc00 <fputc+0x5a>
 bc0:	82 ff       	sbrs	r24, 2
 bc2:	10 c0       	rjmp	.+32     	; 0xbe4 <fputc+0x3e>
 bc4:	4e 81       	ldd	r20, Y+6	; 0x06
 bc6:	5f 81       	ldd	r21, Y+7	; 0x07
 bc8:	2c 81       	ldd	r18, Y+4	; 0x04
 bca:	3d 81       	ldd	r19, Y+5	; 0x05
 bcc:	42 17       	cp	r20, r18
 bce:	53 07       	cpc	r21, r19
 bd0:	7c f4       	brge	.+30     	; 0xbf0 <fputc+0x4a>
 bd2:	e8 81       	ld	r30, Y
 bd4:	f9 81       	ldd	r31, Y+1	; 0x01
 bd6:	9f 01       	movw	r18, r30
 bd8:	2f 5f       	subi	r18, 0xFF	; 255
 bda:	3f 4f       	sbci	r19, 0xFF	; 255
 bdc:	39 83       	std	Y+1, r19	; 0x01
 bde:	28 83       	st	Y, r18
 be0:	10 83       	st	Z, r17
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <fputc+0x4a>
 be4:	e8 85       	ldd	r30, Y+8	; 0x08
 be6:	f9 85       	ldd	r31, Y+9	; 0x09
 be8:	81 2f       	mov	r24, r17
 bea:	19 95       	eicall
 bec:	89 2b       	or	r24, r25
 bee:	29 f7       	brne	.-54     	; 0xbba <fputc+0x14>
 bf0:	2e 81       	ldd	r18, Y+6	; 0x06
 bf2:	3f 81       	ldd	r19, Y+7	; 0x07
 bf4:	2f 5f       	subi	r18, 0xFF	; 255
 bf6:	3f 4f       	sbci	r19, 0xFF	; 255
 bf8:	3f 83       	std	Y+7, r19	; 0x07
 bfa:	2e 83       	std	Y+6, r18	; 0x06
 bfc:	81 2f       	mov	r24, r17
 bfe:	90 2f       	mov	r25, r16
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	1f 91       	pop	r17
 c06:	0f 91       	pop	r16
 c08:	08 95       	ret

00000c0a <__ultoa_invert>:
 c0a:	fa 01       	movw	r30, r20
 c0c:	aa 27       	eor	r26, r26
 c0e:	28 30       	cpi	r18, 0x08	; 8
 c10:	51 f1       	breq	.+84     	; 0xc66 <__ultoa_invert+0x5c>
 c12:	20 31       	cpi	r18, 0x10	; 16
 c14:	81 f1       	breq	.+96     	; 0xc76 <__ultoa_invert+0x6c>
 c16:	e8 94       	clt
 c18:	6f 93       	push	r22
 c1a:	6e 7f       	andi	r22, 0xFE	; 254
 c1c:	6e 5f       	subi	r22, 0xFE	; 254
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	af 4f       	sbci	r26, 0xFF	; 255
 c26:	b1 e0       	ldi	r27, 0x01	; 1
 c28:	3e d0       	rcall	.+124    	; 0xca6 <__ultoa_invert+0x9c>
 c2a:	b4 e0       	ldi	r27, 0x04	; 4
 c2c:	3c d0       	rcall	.+120    	; 0xca6 <__ultoa_invert+0x9c>
 c2e:	67 0f       	add	r22, r23
 c30:	78 1f       	adc	r23, r24
 c32:	89 1f       	adc	r24, r25
 c34:	9a 1f       	adc	r25, r26
 c36:	a1 1d       	adc	r26, r1
 c38:	68 0f       	add	r22, r24
 c3a:	79 1f       	adc	r23, r25
 c3c:	8a 1f       	adc	r24, r26
 c3e:	91 1d       	adc	r25, r1
 c40:	a1 1d       	adc	r26, r1
 c42:	6a 0f       	add	r22, r26
 c44:	71 1d       	adc	r23, r1
 c46:	81 1d       	adc	r24, r1
 c48:	91 1d       	adc	r25, r1
 c4a:	a1 1d       	adc	r26, r1
 c4c:	20 d0       	rcall	.+64     	; 0xc8e <__ultoa_invert+0x84>
 c4e:	09 f4       	brne	.+2      	; 0xc52 <__ultoa_invert+0x48>
 c50:	68 94       	set
 c52:	3f 91       	pop	r19
 c54:	2a e0       	ldi	r18, 0x0A	; 10
 c56:	26 9f       	mul	r18, r22
 c58:	11 24       	eor	r1, r1
 c5a:	30 19       	sub	r19, r0
 c5c:	30 5d       	subi	r19, 0xD0	; 208
 c5e:	31 93       	st	Z+, r19
 c60:	de f6       	brtc	.-74     	; 0xc18 <__ultoa_invert+0xe>
 c62:	cf 01       	movw	r24, r30
 c64:	08 95       	ret
 c66:	46 2f       	mov	r20, r22
 c68:	47 70       	andi	r20, 0x07	; 7
 c6a:	40 5d       	subi	r20, 0xD0	; 208
 c6c:	41 93       	st	Z+, r20
 c6e:	b3 e0       	ldi	r27, 0x03	; 3
 c70:	0f d0       	rcall	.+30     	; 0xc90 <__ultoa_invert+0x86>
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__ultoa_invert+0x5c>
 c74:	f6 cf       	rjmp	.-20     	; 0xc62 <__ultoa_invert+0x58>
 c76:	46 2f       	mov	r20, r22
 c78:	4f 70       	andi	r20, 0x0F	; 15
 c7a:	40 5d       	subi	r20, 0xD0	; 208
 c7c:	4a 33       	cpi	r20, 0x3A	; 58
 c7e:	18 f0       	brcs	.+6      	; 0xc86 <__ultoa_invert+0x7c>
 c80:	49 5d       	subi	r20, 0xD9	; 217
 c82:	31 fd       	sbrc	r19, 1
 c84:	40 52       	subi	r20, 0x20	; 32
 c86:	41 93       	st	Z+, r20
 c88:	02 d0       	rcall	.+4      	; 0xc8e <__ultoa_invert+0x84>
 c8a:	a9 f7       	brne	.-22     	; 0xc76 <__ultoa_invert+0x6c>
 c8c:	ea cf       	rjmp	.-44     	; 0xc62 <__ultoa_invert+0x58>
 c8e:	b4 e0       	ldi	r27, 0x04	; 4
 c90:	a6 95       	lsr	r26
 c92:	97 95       	ror	r25
 c94:	87 95       	ror	r24
 c96:	77 95       	ror	r23
 c98:	67 95       	ror	r22
 c9a:	ba 95       	dec	r27
 c9c:	c9 f7       	brne	.-14     	; 0xc90 <__ultoa_invert+0x86>
 c9e:	00 97       	sbiw	r24, 0x00	; 0
 ca0:	61 05       	cpc	r22, r1
 ca2:	71 05       	cpc	r23, r1
 ca4:	08 95       	ret
 ca6:	9b 01       	movw	r18, r22
 ca8:	ac 01       	movw	r20, r24
 caa:	0a 2e       	mov	r0, r26
 cac:	06 94       	lsr	r0
 cae:	57 95       	ror	r21
 cb0:	47 95       	ror	r20
 cb2:	37 95       	ror	r19
 cb4:	27 95       	ror	r18
 cb6:	ba 95       	dec	r27
 cb8:	c9 f7       	brne	.-14     	; 0xcac <__ultoa_invert+0xa2>
 cba:	62 0f       	add	r22, r18
 cbc:	73 1f       	adc	r23, r19
 cbe:	84 1f       	adc	r24, r20
 cc0:	95 1f       	adc	r25, r21
 cc2:	a0 1d       	adc	r26, r0
 cc4:	08 95       	ret

00000cc6 <_exit>:
 cc6:	f8 94       	cli

00000cc8 <__stop_program>:
 cc8:	ff cf       	rjmp	.-2      	; 0xcc8 <__stop_program>
